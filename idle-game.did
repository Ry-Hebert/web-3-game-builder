type timeStamp = nat;

type reward = record {
    RewardTokenType : text;
    RewardCanister : text;
    RewardFrequency : nat;
    //Per Token Staked Amount
    RewardAmount : nat;
}

type risk = record {
    RiskTokenType : text;
    RiskCanister : text;
    RiskFrequency : nat;
    RiskAmount : nat;
}

type conditionalLogic = record {
    //insert logic perams
}

type stake = record {
    ConditionalLogic : conditionalLogic;
    //Token Type: Fungible or Non Fungible
    TokenType : text;
    StakeCanister : text;
    MinQuantity : nat;
    MinDuration : nat;
    RewardInfo : reward;
    RiskInfo : risk;
    ProbabilityOfSuccess : opt nat;
    TokenStatus : text;
}

type burn = record {
    ConditionalLogic : conditionalLogic;
    //Token Type: Fungible or Non Fungible
    TokenType : text;
    BurnCanister : text;
    MinQuantity : nat;
    RewardInfo : reward;
    RiskInfo : risk;
    ProbabilityOfSuccess : opt nat;
    TokenStatus : text;
}

type userStatus = record {
    ConditionalLogic : conditionalLogic;
    //Token Type: Fungible or Non Fungible
    TokenType : text;
    PaymentCanister : text;
    MinQuantity : nat;
    NewStatusName: text;
    RiskInfo : risk;
    ProbabilityOfSuccess : opt nat;
    TokenStatus : text;
    StatusDuration : nat;
}

type awardBadge = record {
    ConditionalLogic : conditionalLogic;
    //Token Type: Fungible or Non Fungible
    TokenType : text;
    PaymentCanister : text;
    MinQuantity : nat;
    NewBadgeName: text;
    RiskInfo : risk;
    ProbabilityOfSuccess : opt nat;
}

type steal = record {
    ConditionalLogic : conditionalLogic;
    //Token Type: Fungible or Non Fungible
    TokenType : text;
    RiskInfo : risk;
    ProbabilityOfSuccess : opt nat;
    UserStatusAllowedArray : vec text;
    RewardInfo : reward;
    NumTokensToSteal : nat;
}

type claim = record {
    ConditionalLogic : conditionalLogic;
    //Token Type: Fungible or Non Fungible
    TokenType : text;
    PaymentCanister : text;
    NumTokensToPay : nat;
}

type buy = record {
    ConditionalLogic : conditionalLogic;
    //Token Type: Fungible or Non Fungible
    TokenType : text;
    SellCanister : text;
    NumTokensToSell : nat;
    BuyerCanister : text;
}

type buttonLogic = variant {
    typeStake : stake;
    typeBurn : burn;
    typeUserStatus : userStatus;
    typeAwardBadge : awardBadge;
    typeSteal : steal;
    typeClaim : claim;
    typeBuy : buy;
}


service idel-game-builder : {

    createNewButton : (Name : text, ButtonID : nat, ButtonType : text, Buttonlogic : buttonLogic, ButttonGroups : opt vec nat, ConditionalLogic : conditionalLogic) -> (bool);

    deleteButton : (ButtonID : nat) -> (bool);

    editButtonGroups : (ButtonID : nat, ButttonGroups : vec nat) -> (bool);

    editButtonConditionalLogic : (ButtonID : nat, ConditionalLogic : conditionalLogic) -> (bool);

    editButtonFunctionality : (ButtonID : nat, ButtonLogic : opt buttonLogic, ButtonType: opt text, Name : opt text) -> (bool)

    newNftObject : ( NftName : text, NftCanister : text, MetaData : opt vec text, Groups : opt vec nat) -> (bool);

    deleteNftObject : ( NftName : text, NftCanister : text) -> (bool);

    editNftGroups : ( NftName : text, NftCanister : text, Groups : vec nat) -> (bool);

    //intigrate with existing canister func
    editNftImage : () -> ()

    //Wallet Based, NFID or Stoic Identity
    createNewUser : () -> ();

    stake : (ButtonID : nat, TokenToStake : opt vec text, TotalDuration : opt nat, RewardCanister : text) -> (Success : bool, TimeStamp : timeStamp, ButtonID : nat, ButtonType : text);

    burn : (ButtonID : nat, TokenToBurn : opt vec text, RewardCanister : text) -> (Success : bool, TimeStamp : timeStamp, ButtonID : nat, ButtonType : text);

    userStatus : (UserAddress : text) -> (Success : bool, TimeStamp : timeStamp, ButtonID : nat, ButtonType : text);

    awardBadge : (ButtonID : nat, TokenToPay : opt vec text, RewardCanister : text) -> (Success : bool, TimeStamp : timeStamp, ButtonID : nat, ButtonType : text);

    steal : (ButtonID : nat, TokenToRisk : opt vec text, RewardCanister : text) -> (Success : bool, TimeStamp : timeStamp, ButtonID : nat, ButtonType : text);

    claim : (ButtonID : nat, RewardCanister : text) -> (Success : bool, TimeStamp : timeStamp, ButtonID : nat, ButtonType : text);

    buy : (ButtonID : nat, RewardCanister : text, TokenToSell : opt vec text) -> (Success : bool, TimeStamp : timeStamp, ButtonID : nat, ButtonType : text);



}